<div id="reward-checker">
    <div class="validator-list">
        <div class="content-title">
            <i class="fas fa-users"></i>&nbsp;Validator List
            <span class="open-close"><i class="far fa-square-minus"></i></span>
        </div>
        <div class="content-description">バリデータのステーキング報酬関連情報</div>
        <div class="content-main left">
            <div class="content open">
                <div id="validator-info">取得中です。</div>
            </div>
        </div>
    </div>

    <div class="reward-list">
        <div class="content-title">
            <i class="fas fa-coins"></i>&nbsp;Expectation Check
            <span class="open-close"><i class="far fa-square-minus"></i></span>
        </div>
        <div class="content-description">ステーキング報酬(期待値)の確認</div>
        <div class="content-main right">
            <div class="content open">
                <div id="calculate-exp">
                    <div class="title">注意事項</div>
                    <ul>
                        <li><div>各バリデータがアクティブ(上位101位以内)であることが前提です。</div></li>
                        <li>
                            <div>1ブロックあたりのステーキング報酬は以下の計算式で計算します。</div>
                            <div>(投票数 / 得票数) * (ブロック報酬 * 報酬割合)</div>
                        </li>
                        <li><div>10LSK未満の入力値は切り上げて計算します。</div></li>
                        <li><div>報酬が多い順に表示します。</div></li>
                    </ul>
                    <br />
                    <div>報酬(期待値)の確認が出来ます。</div>
                    <input type="number" placeholder="投票数を入力してください">
                </div>
                <div id="calculate-data" style="display: none;"></div>
            </div>
        </div>
    </div>

    <div class="reward-history">
        <div class="content-title">
            <i class="fas fa-book-open"></i>&nbsp;Reward History
            <span class="open-close"><i class="far fa-square-minus"></i></span>
        </div>
        <div class="content-description">受け取ったステーキング報酬の確認</div>
        <div class="content-main left">
            <div class="content open">
                <div id="history-form">
                    <div>報酬を確認したいアドレスを入力してください。</div>
                    <div><input type="text" id="address" placeholder="アドレスを入力してください"></div>
                    <div>報酬を確認したい期間の開始日を入力してください。</div>
                    <div><input type="date" id="fromDate"></div>
                    <div>報酬を確認したい期間の終了日を入力してください。</div>
                    <div><input type="date" id="toDate"></div>
                    <div class="center-button"><button type="button">確認</button></div>
                </div>
                <div id="history-data" style="display: none;"></div>
            </div>
        </div>
    </div>
    
    <link rel="stylesheet" href="../css/reward-checker.css" type="text/css" />
    <script src="../js/common.js" charset="utf-8"></script>
    <script>
        let validatorsList = [];
        const calcExpValue = (val) => {
            if (!validatorsList || validatorsList.length === 0 || !val || val < 10) {
                document.querySelector("#calculate-data").innerHTML = "";
                document.querySelector("#calculate-data").style.display = "none";
                return;
            }

            const vote = Math.ceil(+val / 10) * 10;

            const calcExpValueList = [];
            for (const v of validatorsList) {
                if (v.stakingRate === 0 || v.stakingReward === 0 || v.commission === 100) continue;

                const total = +v.totalStake + vote;
                const block = v.blockReward;
                const rate = v.stakingRate / 100;
                const reward = Math.floor(((vote / total) * (block * rate)) * 100000000) / 100000000;
                calcExpValueList.push({
                    "address": v.address,
                    "name": v.name, 
                    "reward": reward
                });
            }
            
            let validatorInfoHtml = "";
            calcExpValueList.sort((a, b) => b.reward - a.reward); 
            for (const v of calcExpValueList) {
                validatorInfoHtml +=
                        `<div class="title"><a href="https://liskscan.com/account/${v.address}" target="_blank" rel="noopener noreferrer">${v.name}</a></div>` +
                        `<ul>` +
                        `<li><span class="title">1ブロックあたり：</span>${v.reward}LSK</li>` +
                        `<li><span class="title">1日あたり：</span>${Math.floor((v.reward * DAILY_GENERATE_BLOCK) * 100000000) / 100000000}LSK</li>` +
                        `<li><span class="title">1週間あたり：</span>${Math.floor((v.reward * DAILY_GENERATE_BLOCK * 7) * 100000000) / 100000000}LSK</li>` +
                        `<li><span class="title">1ヵ月あたり：</span>${Math.floor((v.reward * DAILY_GENERATE_BLOCK * 30) * 100000000) / 100000000}LSK</li>` +
                        `<li><span class="title">1年あたり：</span>${Math.floor((v.reward * DAILY_GENERATE_BLOCK * 365) * 100000000) / 100000000}LSK</li>` +
                        `</ul>`;
            }
            document.querySelector("#calculate-data").innerHTML = `${validatorInfoHtml}`;
            document.querySelector("#calculate-data").style.display = "block";
        }

        const getExpRewardsInfo = async(validators) => {
            const rewardInfo = [];
            try {
                let workerEndCnt = 0;
                return new Promise(resolve => {
                    for (const validator of validators) {
                        const worker = new Worker("../js/reward-checker-worker.js");
                        worker.addEventListener('message', (e) => {
                            rewardInfo.push(e.data);
                            workerEndCnt += 1;
                            if (validators.length === workerEndCnt) return resolve(rewardInfo);
                        }, false);
                        worker.postMessage({"type":"getExpRewards", "url":SERVICE_URL, "address":validator.address});
                    }
                });
            } catch(err) {
                return err;
            }
        }

        const getValidatorList = async() => {
            const validators = await getValidators();
            if (!validators || validators.length === 0) {
                document.querySelector("#validator-info").innerHTML = `データが取得できませんでした。`;
                return;
            }

            let expRewards = [];
            if (validators.length > 0) {
                expRewards = await getExpRewardsInfo(validators);
            }
            if (!expRewards || expRewards.length === 0) {
                document.querySelector("#validator-info").innerHTML = "データが取得できませんでした。";
                return;
            }

            validatorsList = [];
            for await (const validator of validators) {
                const expReward = expRewards.find((d) => validator.address === d.meta.params.validatorAddress);
                const validatorWeight = +validator.validatorWeight / 100000000;
                const commission = +validator.commission / 100;
                const blockReward = +expReward.data.blockReward / 100000000;
                const stakingRate = 100 - commission;
                const stakingReward = Math.floor(blockReward * (stakingRate / 100) * 100000000) / 100000000;
                const totalStake = +validator.totalStake / 100000000;
                
                validatorsList.push({
                    rank: validator.rank,
                    name: validator.name,
                    address: validator.address,
                    commission: commission,
                    blockReward: blockReward,
                    stakingRate: stakingRate,
                    stakingReward: stakingReward,
                    validatorWeight: validatorWeight,
                    totalStake: totalStake
                });
            }

            if (validatorsList.length === 0) return;

            let validatorInfoHtml = "";
            for await (const v of validatorsList) {
                validatorInfoHtml +=
                    `<div class="title"><a href="https://liskscan.com/account/${v.address}" target="_blank" rel="noopener noreferrer">${v.name}</a></div>` +
                    `<ul>` +
                    `<li><span class="title">ランク：</span>${v.rank}</li>` +
                    `<li><span class="title">報酬割合：</span>${v.stakingRate}%</li>` +
                    `<li><span class="title">ブロック報酬：</span>${v.blockReward}LSK</li>` +
                    `<li><span class="title">ステーキング報酬：</span>${v.stakingReward}LSK</li>` +
                    `<li><span class="title">得票数：</span>${v.totalStake}</li>` +
                    `<li><span class="title">重み：</span>${v.validatorWeight}</li>` +
                    `</ul>`;
            }
            document.querySelector("#validator-info").innerHTML = `${validatorInfoHtml}`;
            document.querySelector("#validator-info").classList.add("hasData");
        }

        const getStakingRewardHeights = async(address, from, to, offset, limit) => {
            try {
                if (offset > 0 && offset % (limit * 10) === 0) await new Promise(resolve => setTimeout(resolve, 5000));
                
                let info = [];
                const ret = await fetch(`https://${SERVICE_URL}/api/v3/transactions?senderAddress=${address}&moduleCommand=pos:claimRewards&timestamp=${from}:${to}&offset=${offset}&limit=${limit}`);
                const json = await ret.json();
                const data = json.data;
                if (!data) return [];
                
                const info1 = [];
                for await(const d of data) {
                    info1.push(d.block.height);
                }
                if (json.meta.count + json.meta.offset < json.meta.total) {
                    const info2 = await getGenerateBlockHeights(address, from, to, offset + limit, limit);
                    info = info1.concat(info2);
                } else {
                    info = info1;
                }
                return info;
            } catch(err) {
                return err;
            }
        }

        const getStakingRewardInfo = async(address, heights) => {
            const rewardInfo = [];
            try {
                let workerEndCnt = 0;
                return new Promise(resolve => {
                    for (const height of heights) {
                        const worker = new Worker("../js/reward-checker-worker.js");
                        worker.addEventListener('message', (e) => {
                            for (data of e.data) rewardInfo.push(data);
                            workerEndCnt += 1;
                            if (heights.length === workerEndCnt) return resolve(rewardInfo);
                        }, false);
                        worker.postMessage({"type":"getStakingReward", "url":SERVICE_URL, "address":address, "height":height, "offset":0, "limit":100});
                    }
                });
            } catch(err) {
                return err;
            }
        }

        const getRewardHistory = async() => {
            const address = document.querySelector("#address").value;
            const fromDate = document.querySelector("#fromDate").value;
            const toDate = document.querySelector("#toDate").value;
            if (!address || !fromDate || !toDate) {
                document.querySelector("#history-data").innerHTML = "";
                document.querySelector("#history-data").style.display = "none";
                return;
            }

            const fromTime = (new Date(`${fromDate} 00:00:00`)).getTime() / 1000;
            const toTime = (new Date(`${toDate} 23:59:59`)).getTime() / 1000;
            const heights = await getStakingRewardHeights(address, fromTime, toTime, 0, 100);
            if (!heights || heights.length === 0) {
                document.querySelector("#history-data").innerHTML = "データが取得できませんでした。";
                document.querySelector("#history-data").style.display = "block";
                return;
            }

            let rewardsAssigned = [];
            if (heights.length > 0) {
                rewardsAssigned = await getStakingRewardInfo(address, heights);
            }
            if (!rewardsAssigned || rewardsAssigned.length === 0) {
                document.querySelector("#history-data").innerHTML = "データが取得できませんでした。";
                document.querySelector("#history-data").style.display = "block";
                return;
            }
            
            const sumData = rewardsAssigned.reduce((result, current) => {
                const data = result.find((d) => d.timestamp === current.timestamp);
                if (data) {
                    data.amount += +current.amount;
                } else {
                    result.push({
                        timestamp: current.timestamp,
                        amount: +current.amount
                    });
                }
                return result;
            }, []);
            
            let historyHtml = "";
            sumData.sort((a, b) => a.timestamp - b.timestamp); 
            for (const v of sumData) {
                const date = new Date(v.timestamp * 1000);
                historyHtml +=
                        `<div class="title">${date.toLocaleDateString()} ${date.toLocaleTimeString()}</div>` +
                        `<ul>` +
                        `<li><span class="title">報酬：</span>${v.amount / 100000000}LSK</li>` +
                        `</ul>`;
            }
            document.querySelector("#history-data").innerHTML = `${historyHtml}`;
            document.querySelector("#history-data").style.display = "block";
        }

        (async() => {
            document.querySelector("#calculate-exp input").addEventListener("input", async(event) => await calcExpValue(event.target.value));
            document.querySelector("#history-form button").addEventListener("click", async(event) => await getRewardHistory());

            document.querySelector("#fromDate").value = getYMD(-7);
            document.querySelector("#toDate").value = getYMD();
            
            await getValidatorList();
        })();
    </script>
</div>
