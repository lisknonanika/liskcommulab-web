<div id="csv-download">
    <div class="csv-download-area">
        <div class="content-title">
            <i class="fas fa-file-csv"></i>&nbsp;CSV Download
            <span class="open-close"><i class="far fa-square-minus"></i></span>
        </div>
        <div class="content-description">CSVファイルのダウンロード</div>
        <div class="content-main left">
            <div class="content open">
                <div id="download-form">
                    <div class="title">注意事項</div>
                    <ul>
                        <li><div>指定の条件に従いデータを抽出し、CSVファイルをダウンロードします。</div></li>
                        <li><div>指定期間が長いと処理に時間がかかります。(1ヵ月程度がおすすめ)</div></li>
                        <li><div>公式のLisk Serviceの状態によっては、処理が中断する可能性があります。</div></li>
                        <li><div>内容の正当性については一切の責任は負いません。</div></li>
                    </ul>
                    <br />
                    <div>アドレスを入力してください。</div>
                    <div><input type="text" id="address" placeholder="アドレスを入力してください"></div>
                    <div>期間の開始日を入力してください。</div>
                    <div><input type="date" id="fromDate"></div>
                    <div>期間の終了日を入力してください。</div>
                    <div><input type="date" id="toDate"></div>
                    <div>送信情報を出力する場合はチェック</div>
                    <div class="checkbox" id="sendTx"><i class="far fa-square-check"></i>出力する</div>
                    <div>受信情報を出力する場合はチェック</div>
                    <div class="checkbox" id="receiveTx"><i class="far fa-square-check"></i>出力する</div>
                    <div>ステーキング報酬の受取を出力する場合はチェック</div>
                    <div class="checkbox" id="stakingReward"><i class="far fa-square-check"></i>出力する</div>
                    <div>ブロック生成報酬を出力する場合はチェック(バリデータのみ)</div>
                    <div class="checkbox" id="generateBlock"><i class="far fa-square"></i>出力する</div>
                    <div class="center-button"><button type="button" id="download"><i class="fas fa-file-arrow-down"></i>&nbsp;ダウンロード</button></div>
                    <input type="checkbox" id="h-sendTx" checked="true" style="display: none;">
                    <input type="checkbox" id="h-receiveTx" checked="true" style="display: none;">
                    <input type="checkbox" id="h-stakingReward" checked="true" style="display: none;">
                    <input type="checkbox" id="h-generateBlock" style="display: none;">
                </div>
            </div>
        </div>
    </div>
    
    <link rel="stylesheet" href="../css/csv-download.css" type="text/css" />
    <script src="../js/common.js" charset="utf-8"></script>
    <script>
        const getDateValue = (months) => {
            if (months === undefined) months = 0;
            let d = new Date();
            d = new Date(d.getFullYear(), d.getMonth() + months, d.getDate(), 0, 0, 0);
            const time = (d.getTime() / 1000) - (d.getTimezoneOffset() * 60) - (60 * 60 * 9);
            if (time < 1701788400) d = new Date(1701788400000);
            return `${d.getFullYear()}-${("00" + (d.getMonth() + 1)).slice(-2)}-${("00" + d.getDate()).slice(-2)}`;
        }

        const check = (target) => {
            document.querySelector(`#h-${target}`).checked = !document.querySelector(`#h-${target}`).checked;
            if (document.querySelector(`#h-${target}`).checked) {
                document.querySelector(`#${target}`).innerHTML = `<i class="far fa-square-check"></i>出力する`;
            } else {
                document.querySelector(`#${target}`).innerHTML = `<i class="far fa-square"></i>出力する`;
            }
        }

        const getSendInfo = async(address, from, to, offset, limit, total) => {
            try {
                console.log(offset);
                const layerHtml = `送信トランザクションを抽出しています...`;
                document.querySelector("#layer").innerHTML = `<div>${layerHtml} (${offset} / ${total})</div>`;
                if (offset > 0 && offset % (limit * 10) === 0) await new Promise(resolve => setTimeout(resolve, 5000));
                
                let Info = [];
                const ret = await fetch(`https://${SERVICE_URL}/api/v3/transactions?senderAddress=${address}&timestamp=${from}:${to}&offset=${offset}&limit=${limit}`);
                const json = await ret.json();
                const data = json.data;
                if (!data) return [];
                
                const Info1 = [];
                for await(const d of data) {
                    Info1.push({
                        id: d.id,
                        dataType: "Transaction",
                        type: "Send",
                        command: d.moduleCommand,
                        executionStatus: d.executionStatus,
                        senderAddress: d.sender.address,
                        recipientAddress: d.moduleCommand === (d.params && d.params.recipientAddress) ? d.params.recipientAddress : "",
                        tokenID: d.moduleCommand === (d.params && d.params.tokenID)  ? d.params.tokenID : "0000000000000000",
                        amount: d.moduleCommand === (d.params && d.params.amount && d.executionStatus !== "failed")  ? +d.params.amount / 100000000 * -1 : 0,
                        fee: +d.fee / 100000000,
                        timestamp: d.block.timestamp,
                        height: d.block.height,
                        remark: "",
                        order: 1
                    });
                }
                document.querySelector("#layer").innerHTML = `<div>${layerHtml} (${+offset + data.length} / ${json.meta.total})</div>`;
                    
                if (json.meta.count + json.meta.offset < json.meta.total) {
                    const Info2 = await getSendInfo(address, from, to, offset + limit, limit, json.meta.total);
                    Info = Info1.concat(Info2);
                } else {
                    Info = Info1;
                }
                return Info.reverse();
            } catch(err) {
                return err;
            }
        }

        const getReceiveInfo = async(address, from, to, offset, limit, total) => {
            try {
                console.log(offset);
                const layerHtml = `受信トランザクションを抽出しています...`;
                document.querySelector("#layer").innerHTML = `<div>${layerHtml} (${offset} / ${total})</div>`;
                if (offset > 0 && offset % (limit * 10) === 0) await new Promise(resolve => setTimeout(resolve, 5000));
                
                let receiveTx = [];
                const ret = await fetch(`https://${SERVICE_URL}/api/v3/transactions?recipientAddress=${address}&timestamp=${from}:${to}&offset=${offset}&limit=${limit}`);
                const json = await ret.json();
                const data = json.data;
                if (!data) return [];
                
                const receiveTx1 = [];
                for await(const d of data) {
                    receiveTx1.push({
                        id: d.id,
                        dataType: "Transaction",
                        type: "Receive",
                        command: d.moduleCommand,
                        executionStatus: d.executionStatus,
                        senderAddress: d.sender.address,
                        recipientAddress: d.moduleCommand === (d.params && d.params.recipientAddress) ? d.params.recipientAddress : "",
                        tokenID: d.moduleCommand === (d.params && d.params.tokenID)  ? d.params.tokenID : "0000000000000000",
                        amount: d.moduleCommand === (d.params && d.params.amount && d.executionStatus !== "failed")  ? +d.params.amount / 100000000 : 0,
                        fee: 0,
                        timestamp: d.block.timestamp,
                        height: d.block.height,
                        remark: "",
                        order: 0
                    });
                }
                document.querySelector("#layer").innerHTML = `<div>${layerHtml} (${+offset + data.length} / ${json.meta.total})</div>`;
                    
                if (json.meta.count + json.meta.offset < json.meta.total) {
                    const receiveTx2 = await getReceiveInfo(address, from, to, offset + limit, limit, json.meta.total);
                    receiveTx = receiveTx1.concat(receiveTx2);
                } else {
                    receiveTx = receiveTx1;
                }
                return receiveTx.reverse();
            } catch(err) {
                return err;
            }
        }

        const getStakingRewardInfo = async(address, from, to, offset, limit, total) => {
            try {
                console.log(offset);
                const layerHtml = `ステーキング報酬を抽出しています...`;
                document.querySelector("#layer").innerHTML = `<div>${layerHtml} (${offset} / ${total})</div>`;
                if (offset > 0 && offset % (limit * 10) === 0) await new Promise(resolve => setTimeout(resolve, 5000));

                const isOutputMint = document.querySelector("#h-generateBlock").checked;
                const isOutputReward = document.querySelector("#h-stakingReward").checked
                
                let eventInfo = [];
                const ret = await fetch(`https://${SERVICE_URL}/api/v3/events?senderAddress=${address}&timestamp=${from}:${to}&offset=${offset}&limit=${limit}`);
                const json = await ret.json();
                const data = json.data;
                if (!data) return [];
                
                const eventInfo1 = [];
                for await(const d of data) {
                    if (isOutputReward && d.module === "pos" && d.name === "rewardsAssigned") {
                        eventInfo1.push({
                            id: d.id,
                            dataType: "Event",
                            type: "Receive",
                            command: `${d.module}:${d.name}`,
                            executionStatus: "successful",
                            senderAddress: d.data.validatorAddress,
                            recipientAddress: d.data.stakerAddress,
                            tokenID: d.data.tokenID,
                            amount: +d.data.amount / 100000000,
                            fee: 0,
                            timestamp: d.block.timestamp,
                            height: d.block.height,
                            remark: "Staking Reward",
                            order: 2
                        });
                    }
                }
                document.querySelector("#layer").innerHTML = `<div>${layerHtml} (${+offset + data.length} / ${json.meta.total})</div>`;
                    
                if (json.meta.count + json.meta.offset < json.meta.total) {
                    const eventInfo2 = await getStakingRewardInfo(address, from, to, offset + limit, limit, json.meta.total);
                    eventInfo = eventInfo1.concat(eventInfo2);
                } else {
                    eventInfo = eventInfo1;
                }
                return eventInfo.reverse();
            } catch(err) {
                return err;
            }
        }

        const getGenerateBlockHeights = async(address, from, to, offset, limit, total) => {
            try {
                console.log(offset);
                const layerHtml = `ブロック生成情報を抽出しています...`;
                document.querySelector("#layer").innerHTML = `<div>${layerHtml} (${offset} / ${total})</div>`;
                if (offset > 0 && offset % (limit * 10) === 0) await new Promise(resolve => setTimeout(resolve, 5000));

                const isOutputMint = document.querySelector("#h-generateBlock").checked;
                const isOutputReward = document.querySelector("#h-stakingReward").checked
                
                let blockInfo = [];
                const ret = await fetch(`https://${SERVICE_URL2}/api/v3/blocks?generatorAddress=${address}&timestamp=${from}:${to}&offset=${offset}&limit=${limit}`);
                const json = await ret.json();
                const data = json.data;
                if (!data) return [];
                
                const blockInfo1 = [];
                for await(const d of data) {
                    blockInfo1.push(d.height);
                }
                document.querySelector("#layer").innerHTML = `<div>${layerHtml} (${+offset + data.length} / ${json.meta.total})</div>`;
                    
                if (json.meta.count + json.meta.offset < json.meta.total) {
                    const blockInfo2 = await getGenerateBlockHeights(address, from, to, offset + limit, limit, json.meta.total);
                    blockInfo = blockInfo1.concat(blockInfo2);
                } else {
                    blockInfo = blockInfo1;
                }
                return blockInfo;
            } catch(err) {
                return err;
            }
        }

        const getGenerateBlockInfo = async(address, blockHeights) => {
            const blockRewardInfo = [];
            try {
                let workerEndCnt = 0;
                const layerHtml = `ブロック生成イベントを抽出しています...`;
                document.querySelector("#layer").innerHTML = `<div>${layerHtml} (0 / ${blockHeights.length})</div>`;
                return new Promise(resolve => {
                    for (const height of blockHeights) {
                        const worker = new Worker("../js/worker.js");
                        worker.addEventListener('message', (e) => {
                            for (data of e.data) blockRewardInfo.push(data);
                            workerEndCnt += 1;
                            document.querySelector("#layer").innerHTML = `<div>${layerHtml} (${workerEndCnt} / ${blockHeights.length})</div>`;
                            if (blockHeights.length === workerEndCnt) return resolve(blockRewardInfo);
                        }, false);
                        worker.postMessage({"url":SERVICE_URL, "address":address, "height":height, "offset":0, "limit":100});
                    }
                });
            } catch(err) {
                return err;
            }
        }

        const outputCSV = async() => {
            if (!document.querySelector("#address").value || !document.querySelector("#fromDate").value || !document.querySelector("#toDate").value) return;
            
            document.querySelector("#layer").style.display = "";

            const address = document.querySelector("#address").value;
            const fromDate = new Date(`${document.querySelector("#fromDate").value} 00:00:00`);
            const fromTime = (fromDate.getTime() / 1000) - (fromDate.getTimezoneOffset() * 60) - (60 * 60 * 9);
            const toDate = new Date(`${document.querySelector("#toDate").value} 23:59:59`);
            const toTime = (toDate.getTime() / 1000) - (toDate.getTimezoneOffset() * 60) - (60 * 60 * 9);
            
            let sendInfo = [];
            let receiveInfo = [];
            let stakingRewardInfo = [];
            let blockHeights = [];
            let blockRewardInfo = [];

            if (document.querySelector("#h-sendTx").checked) {
                console.log("-- getSendInfo start ----------");
                sendInfo = await getSendInfo(address, fromTime, toTime, 0, 100, 0);
                await new Promise(resolve => setTimeout(resolve, 1000));
                console.log(sendInfo);
                console.log("-- getSendInfo end ----------");
            }
            
            if (document.querySelector("#h-receiveTx").checked) {
                console.log("-- getReceiveInfo start ----------");
                receiveInfo = await getReceiveInfo(address, fromTime, toTime, 0, 100, 0);
                await new Promise(resolve => setTimeout(resolve, 1000));
                console.log(receiveInfo);
                console.log("-- getReceiveInfo end ----------");
            }

            if (document.querySelector("#h-stakingReward").checked) {
                console.log("-- getStakingRewardInfo start ----------");
                stakingRewardInfo = await getStakingRewardInfo(address, fromTime, toTime, 0, 100, 0);
                await new Promise(resolve => setTimeout(resolve, 1000));
                console.log(stakingRewardInfo);
                console.log("-- getStakingRewardInfo end ----------");
            }

            if (document.querySelector("#h-generateBlock").checked) {
                console.log("-- getGenerateBlockHeights start ----------");
                blockHeights = await getGenerateBlockHeights(address, fromTime, toTime, 0, 100, 0);
                await new Promise(resolve => setTimeout(resolve, 1000));
                console.log(blockHeights);
                console.log("-- getGenerateBlockHeights end ----------");

                if (blockHeights.length > 0) {
                    console.log("-- getGenerateBlockInfo start ----------");
                    blockRewardInfo = await getGenerateBlockInfo(address, blockHeights);
                    console.log(blockRewardInfo);
                    console.log("-- getGenerateBlockInfo end ----------");
                }
            }
            
            console.log("-- summary start ----------");
            const summaryInfo = sendInfo.concat(receiveInfo.concat(stakingRewardInfo.concat(blockRewardInfo)));
            summaryInfo.sort((a, b) => +(a.timestamp.toString() + a.order.toString()) - +(b.timestamp.toString() + b.order.toString()));
            console.log(summaryInfo);
            console.log("-- summary end ----------");
            
            console.log("-- csv download start ----------");
            let csvData =
                `"ID",` +
                `"DataType",` +
                `"Type",` +
                `"Command",` +
                `"Status",` +
                `"Sender",` +
                `"Recipient",` +
                `"TokenID",` +
                `"Amount",` +
                `"Fee",` +
                `"Date",` +
                `"Timestamp",` +
                `"Height",` +
                `"Remark"` +
                `\r\n`;
            for await(const d of summaryInfo) {
                const dt = new Date(d.timestamp * 1000);
                csvData +=
                    `"${d.id}",` +
                    `"${d.dataType}",` +
                    `"${d.type}",` +
                    `"${d.command}",` +
                    `"${d.executionStatus}",` +
                    `"${d.senderAddress}",` +
                    `"${d.recipientAddress}",` +
                    `"${d.tokenID}",` +
                    `"${d.amount}",` +
                    `"${d.fee}",` +
                    `"${dt.toLocaleDateString()} ${dt.toLocaleTimeString()}",` +
                    `"${d.timestamp}",` +
                    `"${d.height}",` +
                    `"${d.remark}"` +
                    `\r\n`;
            }
            
            const blob = new Blob([csvData],{type: "text/csv"});
            const downloadLink = document.createElement("a");
            downloadLink.href = URL.createObjectURL(blob);
            downloadLink.download =`${address}_${fromTime}_${toTime}.csv`;
            downloadLink.click();
            downloadLink.remove();
            console.log("-- csv download end ----------");

            document.querySelector("#layer").style.display = "none";
        }
        
        (() => {
            document.querySelector("#download").addEventListener("click", async(event) => await outputCSV());
            document.querySelector("#sendTx").addEventListener("click", async(event) => await check("sendTx"));
            document.querySelector("#receiveTx").addEventListener("click", async(event) => await check("receiveTx"));
            document.querySelector("#stakingReward").addEventListener("click", async(event) => await check("stakingReward"));
            document.querySelector("#generateBlock").addEventListener("click", async(event) => await check("generateBlock"));
            document.querySelector("#fromDate").value = getDateValue(-1);
            document.querySelector("#toDate").value = getDateValue(0);
        })();
    </script>
</div>
