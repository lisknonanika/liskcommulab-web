<div id="staking">
    <div class="staking-info">
        <div class="content-title">
            <img src="../image/commulab-Logo.png"/>&nbsp;Staking Information
            <span class="open-close"><i class="far fa-square-minus"></i></span>
        </div>
        <div class="content-description">ステーキング報酬に関する情報</div>
        <div class="content-main left">
            <div class="content open">
                <div>commulabの現在の状況は以下の通りです&nbsp;<i class="far fa-face-laugh-beam"></i></div>
                <br />
                <ul>
                    <li>
                        <div><span class="title">報酬割合</span>：ブロック報酬からステーキング報酬にまわす割合</div>
                        <div id="staking-rate">取得中です。</div>
                    </li>
                </ul>
                <ul>
                    <li>
                        <div><span class="title">ブロック報酬</span>：commulabがブロック生成ごとに受け取る報酬</div>
                        <div id="block-reward">取得中です。</div>
                    </li>
                </ul>
                <ul>
                    <li>
                        <div><span class="title">ステーキング報酬</span>：1ブロックあたりの総ステーキング報酬(ブロック報酬×報酬割合)</div>
                        <div id="staking-reward">取得中です。</div>
                    </li>
                </ul>
                <ul>
                    <li>
                        <div><span class="title">自己投票数</span>：commulabの自己投票数</div>
                        <div id="self-stake">取得中です。</div>
                    </li>
                </ul>
                <ul>
                    <li>
                        <div><span class="title">得票数</span>：commulabの得票数(自己投票数を含む)</div>
                        <div id="total-stake">取得中です。</div>
                    </li>
                </ul>
                <ul>
                    <li>
                        <div><span class="title">重み</span>：ランク計算等に使用される重み(最大：自己投票数×10)</div>
                        <div id="validator-weight">取得中です。</div>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <div class="staking-expectation">
        <div class="content-title">
            <img src="../image/commulab-Logo.png"/>&nbsp;Expectation Check
            <span class="open-close"><i class="far fa-square-minus"></i></span>
        </div>
        <div class="content-description">ステーキング報酬(期待値)の確認</div>
        <div class="content-main right">
            <div class="content open">
                <div id="calculate-exp">
                    <div class="title">注意事項</div>
                    <ul>
                        <li><div>commulabがアクティブ(上位101位以内)であることが前提です。</div></li>
                        <li>
                            <div>1ブロックあたりのステーキング報酬は以下の計算式で計算します。</div>
                            <div>(投票数 / 得票数) * (ブロック報酬 * 報酬割合)</div>
                        </li>
                        <li><div>10LSK未満の入力値は切り上げて計算します。</div></li>
                    </ul>
                    <br />
                    <div>報酬(期待値)の確認が出来ます。</div>
                    <input type="number" placeholder="投票数を入力してください">
                </div>
                <div id="calculate-data" style="display: none;"></div>
            </div>
        </div>
    </div>

    <link rel="stylesheet" href="../css/staking.css" type="text/css" />
    <script src="https://js.lisk.com/lisk-client-5.2.1.js" charset="utf-8"></script>
    <script src="../js/common.js" charset="utf-8"></script>
    <script>
        let blockReward = 0;
        let stakingRate = 0;
        let stakingReward = 0;
        let selfStake = 0;
        let totalStake = 0;
        let validatorWeight = 0;

        const getValidatorInfo = async() => {
            const data = await getMyAccount();
            stakingRate = 100.00 - (+data.commission / 100);
            stakingReward = Math.floor(blockReward * (stakingRate / 100) * Math.pow(10, 8)) / Math.pow(10, 8);
            selfStake = +data.selfStake / 100000000;
            totalStake = +data.totalStake / 100000000;
            validatorWeight = +data.validatorWeight / 100000000;
        }

        const calcExpValue = (val) => {
            if (!val || val < 10) {
                document.querySelector("#calculate-data").innerHTML = "";
                document.querySelector("#calculate-data").style.display = "none";
                return;
            }
            
            const vote = Math.ceil(+val / 10) * 10;
            const total = +totalStake + vote;
            const block = blockReward;
            const rate = stakingRate / 100;
            const result = Math.floor(((vote / total) * (block * rate)) * Math.pow(10, 8)) / Math.pow(10, 8);

            document.querySelector("#calculate-data").innerHTML = `<div class="title">ステーキング報酬</div>`; 
            document.querySelector("#calculate-data").innerHTML +=
                `<ul>` +
                `<li><span class="title">1ブロックあたり：</span><span>${result}LSK</span>` +
                `<li><span class="title">1日あたり：</span><span>${Math.floor((result * DAILY_GENERATE_BLOCK) * Math.pow(10, 8)) / Math.pow(10, 8)}LSK</span></li>` +
                `<li><span class="title">1週間あたり：</span><span>${Math.floor((result * DAILY_GENERATE_BLOCK * 7) * Math.pow(10, 8)) / Math.pow(10, 8)}LSK</span></li>` +
                `<li><span class="title">1ヵ月あたり：</span><span>${Math.floor((result * DAILY_GENERATE_BLOCK * 30) * Math.pow(10, 8)) / Math.pow(10, 8)}LSK</span></li>` +
                `<li><span class="title">1年あたり：</span><span>${Math.floor((result * DAILY_GENERATE_BLOCK * 365) * Math.pow(10, 8)) / Math.pow(10, 8)}LSK</span></li>` +
                `</ul>`;
            document.querySelector("#calculate-data").innerHTML += `<div class="title" style="margin-top: 10px;">以下で計算しています。</div>`; 
            document.querySelector("#calculate-data").innerHTML += 
                `<ul>` +
                `<li><span class="title">投票数：</span><span>${vote}LSK</span></li>` +
                `<li><span class="title">得票数：</span><span>${total}LSK</span></li>` +
                `<li><span class="title">ブロック報酬：</span><span>${block}LSK</span></li>` +
                `<li><span class="title">報酬割合：</span><span>${rate * 100}%</span></li>` +
                `</ul>`;
            document.querySelector("#calculate-data").style.display = "block";
        }

        (async() => {
            document.querySelector("#calculate-exp input").addEventListener("input", (event) => calcExpValue(event.target.value));
            await getMyReward();
            await getValidatorInfo();
            document.querySelector("#staking-rate").innerHTML = `${stakingRate}%`;
            document.querySelector("#block-reward").innerHTML = `${blockReward}LSK`;
            document.querySelector("#staking-reward").innerHTML = `${stakingReward}LSK`;
            document.querySelector("#self-stake").innerHTML = `${selfStake}`;
            document.querySelector("#total-stake").innerHTML = `${totalStake}`;
            document.querySelector("#validator-weight").innerHTML = `${validatorWeight}`;
        })();
    </script>
</div>